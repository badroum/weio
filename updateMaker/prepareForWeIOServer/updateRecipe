#!/usr/bin/python
### 
#
# WEIO Web Of Things Platform
# Copyright (C) 2013 Nodesign.net, Uros PETREVSKI, Drasko DRASKOVIC
# All rights reserved
#
#               ##      ## ######## ####  #######  
#               ##  ##  ## ##        ##  ##     ## 
#               ##  ##  ## ##        ##  ##     ## 
#               ##  ##  ## ######    ##  ##     ## 
#               ##  ##  ## ##        ##  ##     ## 
#               ##  ##  ## ##        ##  ##     ## 
#                ###  ###  ######## ####  #######
#
#                    Web Of Things Platform 
#
# This file is part of WEIO and is published under BSD license.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#    This product includes software developed by the WeIO project.
# 4. Neither the name of the WeIO nor the
# names of its contributors may be used to endorse or promote products
# derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY WEIO PROJECT AUTHORS AND CONTRIBUTORS ''AS IS'' AND ANY
# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL WEIO PROJECT AUTHORS AND CONTRIBUTORS BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Authors : 
# Uros PETREVSKI <uros@nodesign.net>
# Drasko DRASKOVIC <drasko.draskovic@gmail.com>
#
###
import urllib2, urllib, subprocess, platform, json, hashlib, os, shutil

def startDownload(fwUrl, targetFile):
    print "download init"
    try:
        req = urllib2.Request(fwUrl)
        handle = urllib2.urlopen(req)
    except urllib2.HTTPError, e:
        print "Can't download firmware, error code - %s." % e.code
        return
    except urllib2.URLError:
        print "Bad URL for firmware file: %s" % fwUrl
        return
    else:
        print "download starts"
        urllib.urlretrieve(fwUrl, targetFile)
        print "download finished"

def getMd5sum(filename):
    md5 = hashlib.md5()
    with open(filename,'rb') as f: 
        for chunk in iter(lambda: f.read(128*md5.block_size), b''): 
             md5.update(chunk)
    return md5.hexdigest()

def getJsonFromDisk(path):
    inputFile = open(path, 'r')
    rawData = inputFile.read()
    inputFile.close()
    return json.loads(rawData)

targetPath = None

if (platform.machine() == 'mips') :
    # On WeIO save to RAM
     targetPath = "/tmp"
else:
    # On PC save in the place
    targetPath = "./"

# Kill WeIO at FIRST!
p = subprocess.Popen(["/etc/init.d/weio_run", "stop"])
print p.communicate()

# Now we can start update procedure

# SAFE HOUSE
# Backup config.weio and userProjects
# this will be backuped after flashing with run_weio script (first time)
if (platform.machine() == 'mips') :
    bckpdir = "/weioUserBackup"
    # kill all symlinks in user projects otherwise it's not possible to move them or copy
    p = subprocess.Popen(["sh", "/weio/scripts/killUserProjectSymlinks.sh"])
    print p.communicate()
    # move user projects to the backup directory
    shutil.move("/weioUser/flash", bckpdir)
    # add config.weio to the safe house
    shutil.copyfile("/weio/config.weio", bckpdir+"/config.weio")

# DOWNLOADING PROCEDURE
# get json to extract MD5 data
print "getting JSON configuration from WeIO server"
startDownload("http://www.puzzle-lab.com/downloads/update/updateWeio.json", targetPath+"/updateWeio.json")

data = getJsonFromDisk(targetPath+"/updateWeio.json")

print "\ngetting new firmware from WeIO server"
startDownload(data["recovery"]["download_url"], targetPath+"/weio_recovery.bin")
recoveryMd5Distant = data["recovery"]["md5"]
recoveryMd5Local = getMd5sum(targetPath+"/weio_recovery.bin")

# SYSTEM UPGRADE
if (recoveryMd5Distant == recoveryMd5Local):
    print "MD5 matches. Starting sysupgrade procedure"
    if (platform.machine() == 'mips') :
        print "killing WeIO application to free RAM"
        # start upgrade
        p = subprocess.Popen(["sysupgrade", "-v", targetPath+"/weio_recovery.bin"])
        print p.communicate()
    else:
        print "Doing nothing on PC, exiting"
        exit()
